class DynamicTimeIndexedShootingProblem

extend <exotica_core/planning_problem>

Required int T;
Required double tau;  // Discretisation timestep of the trajectory

Optional std::vector<exotica::Initializer> Cost = std::vector<exotica::Initializer>();  // General costs (via task-maps)
Optional Eigen::VectorXd Q = Eigen::VectorXd();
Optional Eigen::VectorXd Qf = Eigen::VectorXd();
Optional Eigen::VectorXd R = Eigen::VectorXd();
Optional Eigen::VectorXd GoalState = Eigen::VectorXd();
Optional double Q_rate = 1.;
Optional double Qf_rate = 1.;
Optional double R_rate = 1.;

Optional Eigen::VectorXd C = Eigen::VectorXd(); // Control-dependent noise scaling factor
Optional double C_rate = 0;  // Control-dependent noise constant covariance. Mutex w/ C

Optional Eigen::VectorXd CW = Eigen::VectorXd(); // Control-idependent (white) noise scaling factor
Optional double CW_rate = 0;  // Control-independent (white) noise constant covariance. Mutex w/ CW

Optional bool WarmStartWithInverseDynamics = false;

// Different control cost types. By default, L2 is used.
// Different L1 costs can introduce sparsity.
Optional Eigen::VectorXd L1Rate = Eigen::VectorXd();
Optional Eigen::VectorXd HuberRate = Eigen::VectorXd();
Optional double L1IncreaseRate = 1.5;
Optional double MaxL1Rate = 1e5;
Optional std::string LossType = "L2";  // "SmoothL1", "Huber", "BiModalHuber", "L2"

// WIP: BiModalHuber related costs:
Optional Eigen::VectorXd Mode1 = Eigen::VectorXd();
Optional Eigen::VectorXd Mode2 = Eigen::VectorXd();
